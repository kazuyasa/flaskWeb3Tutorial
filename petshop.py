import json
from flask import Flask, Response, request, jsonify
from marshmallow import Schema, fields, ValidationError
from web3 import Web3

def check_gender(data):
    valid_list = ["male", "female"]
    if data not in valid_list:
        raise ValidationError(
            'Invalid gender. Valid choices are'+ valid_list
        )

class UserSchema(Schema):
    name = fields.String(required=True)
    gender = fields.String(required=True, validate=check_gender)


def check_number(id):
    id=int(id)
    if id<0 or id>15:
        raise ValidationError(
            'Invalid number.'
        )

class PetIdSchema(Schema):
    petId = fields.Integer(required=True, validate=check_number)



app = Flask(__name__)


# api to adopt your pet
@app.route("/blockchain/pet", methods=['POST'])
def transaction():
    #Interact with Ganache(etereum test-node)
    w3=Web3(Web3.HTTPProvider("http://127.0.0.1:7545"))
    #Define ethereum account you use
    w3.eth.defaultAccount = w3.eth.accounts[1]
    #Define abi & contract address
    with open("petdata.json", 'r') as f:
        datastore = json.load(f)
    abi = datastore["abi"]
    #contract_address = datastore["contract_address"]
    #You must use "w3.toChecksumAddress()", if your address is generated by test-node(like "Ganache"...etc)
    contract_address = w3.toChecksumAddress(datastore["contract_address"])
    # Create the contract instance with the newly-deployed address
    adoption = w3.eth.contract(
        address=contract_address, abi=abi,
    )
    body = request.get_json()
    result, error = PetIdSchema().load(body)
    if error:
        return jsonify(error), 422
    #Adopt pet
    tx_hash = adoption.functions.adopt(result['petId']).transact()
    # Wait for transaction to be mined...
    receipt = w3.eth.waitForTransactionReceipt(tx_hash)
    #Get adopter`s address
    adopterList=adoption.functions.getAdopters().call()
    return jsonify({"data": adopterList}), 200
